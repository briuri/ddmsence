This is a draft list of the changes which break backwards compatibility between v1.11.0 and v2.0.0.
I will create an official ticket once all of the changes are complete and the dust has settled.

#########################################################################################################
Producers and producer entities are now modeled exactly as they appear in the schemas (Issue #153).

SEVERITY: Major
DETAILS:
	In previous versions of DDMSence, the producer hierarchy was flattened to be more object-oriented:
	
	<ddms:creator>
   		<ddms:Organization>
      		<ddms:name>DISA</ddms:name>
   		</ddms:Organization>	
	</ddms:creator>
	
	This creator element was modeled in DDMSence as "An instance of Organization has the role of creator" 
	and the Organization class contained this entire construct. With DDMS 4.0, Organizations and Persons 
	can now appear in other elements (Addressee and RecordKeeper) besides the classic producers, and the 
	old approach became fragile. Producers and producer entities are now consistent with the schema -- 
	the above construct is modeled as "An instance of Creator contains an instance of Organization".
	
	Specifically, there is a new class for Creator, Contributor, Publisher, and PointOfContact, and the 
	old producer entities, Organization Person, Service, and Unknown are no longer top-level components.
FIX:
	The four producer entity classes must now be wrapped into a producer role class. As an example, if you 
	previously had code that worked with an "Organization that was a creator":
	
	Organization org =
		new Organization(Organization.CREATOR_NAME, names, phones, emails, securityAttributes, extensibleAttributes);
	
	You would now deal with a "Creator that contains an Organization":
	
	Organization org = new Organization(Creator.NAME, names, phones, emails, extensibleAttributes);
	Creator creator = new Creator(org, null, securityAttributes);
		
	See Issue #153 for a description of the OLD class hierarchy and the NEW class hierarchy. I will also 
	be glad to review your code and provide feedback on how it can be upgraded.
	
#########################################################################################################
The ability to point at custom CVEs with the "icism.cve.customEnumLocation" property has been removed (Issue #95). 

SEVERITY: Major 
DETAILS:
	The selection of CVE is now based upon the current DDMSVersion and uses bundled Public Release CVEs all 
	of the time. Because V5 and above of ISM.XML validate vocabularies directly from the schemas (with 
	generated CVE schemas), changing the vocabulary without changing the schema no longer made sense. 
	Issue #154 tracks future work to reintroduce this general concept of swappable ISM, but at the schema 
	level and not just the vocabulary level. You can still toggle CVEs between warnings and errors with the 
	"ism.cve.validationAsErrors" custom property.
FIX:
	There is no workaround at this time. Please contact me with feedback on how you used this feature previously 
	so I can support your use case in the future.
		
#########################################################################################################
Non-DDMS classes have been moved into new packages (Issue #148).

SEVERITY: Minor
DETAILS:
	- GML classes (Point, Polygon, Position, and SRSAttributes) have moved into buri.ddmsence.ddms.summary.gml.
	- ISM classes (ISMVocabulary, and SecurityAttributes) have moved into buri.ddmsence.ddms.security.ism.
FIX:
	Update any Java import statements that point to the old package.

#########################################################################################################
Configurable property names have changed (Issue #95)

SEVERITY: Minor
DETAILS: 
	- icism.cve.validationAsErrors became ism.cve.validationAsErrors.
	- icism.prefix became ism.prefix.
FIX:
	Update property names if you used these custom properties.

#########################################################################################################
Method names have changed (Issue #95)

SEVERITY: Minor
DETAILS:
	- DDMSVersion: getIcismNamespace() became getIsmNamespace() (Issue #95).
	- ISMVocabulary: setIsmVersion() became setDDMSVersion() (Issue #95).
FIX:
	Update method names in your code if you ever called them.	

#########################################################################################################
Mechanism for version comparison changed (Issue #159)

SEVERITY: Minor
DETAILS:
	Previously, the method DDMSVersion.isCompatibleWithVersion() was introduced to determine whether
	an element with a particular DDMS namespace was compatible with some version of DDMS. This introduced
	unnecessary complexity, since there is still a 1-to-1 relationship between DDMSVersions and namespaces.
	The method has been replaced with a similar method that checks whether a version is greater than or
	equal to a test version -- this conditional is much more useful.
FIX:
	If you had this code:
	
	boolean isCompatible = DDMSVersion.isCompatibleWithVersion("3.0", xomElement);
	
	You can accomplish the same thing with:
	
	boolean isCompatible = "3.0".equals(DDMSVersion.getVersionForDDMSNamespace(xomElement.getNamespaceURI()).getVersion());	
