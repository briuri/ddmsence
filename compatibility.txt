This is a draft list of the changes which break backwards compatibility between v1.11.0 and v2.0.0.
I will create an official ticket once all of the changes are complete and the dust has settled.
	
#########################################################################################################
The ability to point at custom CVEs with the "icism.cve.customEnumLocation" property has been removed (Issue #95). 

SEVERITY: Major 
DETAILS:
	The selection of CVE is now based upon the current DDMSVersion and uses bundled Public Release CVEs all 
	of the time. Because V5 and above of ISM.XML validate vocabularies directly from the schemas (with 
	generated CVE schemas), changing the vocabulary without changing the schema no longer made sense. 
	Issue #154 tracks future work to reintroduce this general concept of swappable ISM, but at the schema 
	level and not just the vocabulary level. You can still toggle CVEs between warnings and errors with the 
	"ism.cve.validationAsErrors" custom property.
FIX:
	There is no workaround at this time. Please contact me with feedback on how you used this feature previously 
	so I can support your use case in the future.

#########################################################################################################
Producers and producer entities are now modeled exactly as they appear in the schemas (Issue #153).

SEVERITY: Major
DETAILS:
	In previous versions of DDMSence, the producer hierarchy was flattened to be more object-oriented:
	
	<ddms:creator>
   		<ddms:Organization>
      		<ddms:name>DISA</ddms:name>
   		</ddms:Organization>	
	</ddms:creator>
	
	This creator element was modeled in DDMSence as "An instance of Organization has the role of creator" 
	and the Organization class contained this entire construct. With DDMS 4.0, Organizations and Persons 
	can now appear in other elements (Addressee and RecordKeeper) besides the classic producers, and the 
	old approach became fragile. Producers and entities are now consistent with the schema -- 
	the above construct is modeled as "An instance of Creator contains an instance of Organization".
	
	Specifically, there is a new class for Creator, Contributor, Publisher, and PointOfContact, and the 
	old entities, Organization Person, Service, and Unknown are no longer top-level components.
FIX:
	The four entity classes must now be wrapped into a producer role class. As an example, if you 
	previously had code that worked with an "Service that was a creator":
	
	Service service =
		new Service(Service.CREATOR_NAME, names, phones, emails);
	
	You would now deal with a "Creator that contains a Service":
	
	Service service = new Service(names, phones, emails);
	Creator creator = new Creator(service, null, securityAttributes);
		
	See Issue #153 for a description of the OLD class hierarchy and the NEW class hierarchy. I will also 
	be glad to review your code and provide feedback on how it can be upgraded.

#########################################################################################################
The RelatedResources hierarchy has changed (Issue #130)

SEVERITY: Major
DETAILS:
	The hierarchy for related resources was previously:
	
	ddms:relatedResources (0-many in a ddms:Resource)
		@ddms:relationship
		@ddms:direction
		@<ismAttributesOptional>
		ddms:relatedResource (1-many)
			@ddms:qualifier
			@ddms:value
			ddms:link (1-many)
		
	DDMS 4.0  has flattened this to one level:
	
	ddms:relatedResource (0-many in a ddms:Resource)
		@ddms:qualifier
		@ddms:value
		@ddms:relationship
		@ddms:direction
		@<ismAttributesOptional>
		ddms:link (1-many)
	
	To support this, the RelatedResources class has been completely removed. The remaining RelatedResource class now 
	contains all of the required information (including the relationship and direction attributes). The element-based
	constructor for RelatedResource expects a construct that describes a single related resource. For example:
	
	Pre-DDMS 4.0:
	<ddms:relatedResources ddms:relationship="http://purl.org/dc/terms/references" ddms:direction="outbound" 
		ISM:classification="U" ISM:ownerProducer="USA">
		<ddms:RelatedResource ddms:qualifier="http://purl.org/dc/terms/URI" ddms:value="http://en.wikipedia.org/wiki/Tank">
			<ddms:link [...] />
		</ddms:RelatedResource>
	</ddms:relatedResources>
	
	DDMS 4.0:
	<ddms:relatedResource ddms:relationship="http://purl.org/dc/terms/references" ddms:direction="outbound" 
		ddms:qualifier="http://purl.org/dc/terms/URI" ddms:value="http://en.wikipedia.org/wiki/Tank" 
		ISM:classification="U" ISM:ownerProducer="USA">
		<ddms:link [...] />
	</ddms:relatedResource>
	
	In earlier versions of DDMS, having multiple resources with the same relationship and direction was allowed:
	
	Pre-DDMS 4.0:
	<ddms:relatedResources ddms:relationship="http://purl.org/dc/terms/references" ddms:direction="outbound" 
		ISM:classification="U" ISM:ownerProducer="USA">
		<ddms:RelatedResource ddms:qualifier="http://purl.org/dc/terms/URI" ddms:value="http://en.wikipedia.org/wiki/Tank">
			<ddms:link [...] />
		</ddms:RelatedResource>
		<ddms:RelatedResource ddms:qualifier="http://purl.org/dc/terms/URI" ddms:value="http://en.wikipedia.org/wiki/Fish">
			<ddms:link [...] />
		</ddms:RelatedResource>
	</ddms:relatedResources>

	If the element-based constructor of RelatedResource encounters this case of multiples, it will only process the first
	related resource and provide a validation warning message. However, the element-based constructor for the entire Resource
	has been updated to mediate this case automatically.

FIX:
	If you are working at the Resource level, you don't need to do a thing. The Resource constructors can handle all legal
	ddms:relatedResources or ddms:relatedResource elements. However, if you were instantiating RelatedResources or 
	RelatedResource classes directly, you will need to update your code to stop using the removed class. I will also 
	be glad to review your code and provide feedback on how it can be upgraded. 

#########################################################################################################
Producer entities and country codes no longer have a parentType (Issue #162)

SEVERITY: Minor
DETAILS:
	Person, Organization, Service, Unknown, and CountryCode previously maintained a reference to the
	enclosing component (such as "creator" for Person or "geographicIdentifier" for CountryCode). This made
	the hierarchy more fragile than necessary, and has been removed.
FIX:
	Constructor calls which previously had the parentType:
	
	new CountryCode("postalAddress", element);
	
	Now no longer have a parentType:
	
	new CountryCode(element);

#########################################################################################################
Method signatures have changed (multiple issues)

SEVERITY: Minor
DETAILS:
	- Category: The constructor has additional parameters for optional attributes. (Issue #155)
	- Dates: The constructor has additional parameters for optional dates. (Issue #117)
	- DDMSVersion: getIcismNamespace() became getIsmNamespace() (Issue #95).
	- GeographicIdentifier: The constructor has an additional parameter for optional subDivisionCode. (Issue #122)
	- ISMVocabulary: setIsmVersion() became setDDMSVersion() (Issue #95).
	- Keyword: The constructor has an additional parameter for optional attributes. (Issue #156)
	- Organization: The constructor has additional parameters for optional subOrganization and acronym. (Issue #113)
	- Person: The order of the constructor parameters has been reordered to match the DDMS 4.0 schema (Issue #114)
	- RelatedResource: The constructor has additional parameters for new attributes. (Issue #130)
	- Resource: getSubjectCoverage() became getSubjectCoverages() and now returns a list of SubjectCoverage components (Issue #126)
	- SubjectCoverage: The constructor has additional parameters for productionMetrics and nonStateActors.  (Issue #126)
	- Type: The constructor has an additional parameter for optional description. (Issue #118)
FIX:
	Update method signatures in your code if you ever called them.	
	
#########################################################################################################
Components no longer have a publicly-accessible constant, NAME (Issue #152)

SEVERITY: Minor
DETAILS:
	Previously all components had a public NAME field containing the expected name of the component. Because
	many elements have had their names changed in DDMS 4.0 (i.e. ddms:Person became ddms:person), component
	classes now have a static method which returns a name for some DDMSVersion.
FIX:
	If you previously referenced something like:
	
	String extentName = Extent.NAME;
	
	You would now call a static method:
	
	String extentName = Extent.getName(ddmsVersion);
	
#########################################################################################################
Non-DDMS classes have been moved into new packages (Issue #148).

SEVERITY: Minor
DETAILS:
	- GML classes (Point, Polygon, Position, and SRSAttributes) have moved into buri.ddmsence.ddms.summary.gml.
	- ISM classes (ISMVocabulary, and SecurityAttributes) have moved into buri.ddmsence.ddms.security.ism.
FIX:
	Update any Java import statements that point to the old package.

#########################################################################################################
Configurable property names have changed (Issue #95)

SEVERITY: Minor
DETAILS: 
	- icism.cve.validationAsErrors became ism.cve.validationAsErrors.
	- icism.prefix became ism.prefix.
FIX:
	Update property names if you used these custom properties.


#########################################################################################################
Renamed classes (multiple issues)

SEVERITY: Minor
DETAILS:
	- MediaExtent renamed to Extent: Because the Media wrapper was removed in DDMS 4.0, the name no longer made sense. (Issue #127).
	- IProducerEntity renamed to IRoleEntity: Because Entities can now fulfill non-producer roles, the name no longer made sense (Issue #163)
FIX:
	Change the class names of the affected classes.
	
#########################################################################################################
Mechanism for version comparison changed (Issue #159)

SEVERITY: Minor
DETAILS:
	Previously, the method DDMSVersion.isCompatibleWithVersion() was introduced to determine whether
	an element with a particular DDMS namespace was compatible with some version of DDMS. This introduced
	unnecessary complexity, since there is still a 1-to-1 relationship between DDMSVersions and namespaces.
	The method has been replaced with a similar method that checks whether a version is greater than or
	equal to a test version -- this conditional is much more useful.
FIX:
	If you had this code:
	
	boolean isCompatible = DDMSVersion.isCompatibleWithVersion("3.0", xomElement);
	
	You can accomplish the same thing with:
	
	boolean isCompatible = DDMSVersion.getVersionForDDMSNamespace(xomElement.getNamespaceURI()).isAtLeast("3.0");	
